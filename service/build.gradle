/*
 * Copyright 2017 IntraFind Software AG. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        spring_boot_version = "1.5.7.RELEASE"
        swagger_version = "2.7.0"
        xodus_version = "1.0.6"
    }
}

plugins {
    id "java"
    id "idea"
    id "org.springframework.boot" version "1.5.7.RELEASE"
//    id "me.champeau.gradle.jmh" version "0.4.4"
    id "io.morethan.jmhreport" version "0.6.2.1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2" }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "undertow-websockets-jsr"
}

dependencies {
    compile "org.springframework.kafka:spring-kafka:1.2.3.RELEASE"
//    compile "org.springframework.kafka:spring-kafka:2.0.0.RELEASE"

    compile "org.jetbrains.xodus:xodus-openAPI:$xodus_version"
    compile "org.jetbrains.xodus:xodus-entity-store:$xodus_version"
    
    compile "com.rometools:rome:1.7.4"

    compile "com.caucho:hessian:4.0.38"
    compile files("../libs/if-api-1.3.0.79-47216.jar")

    compile "org.springframework.boot:spring-boot-starter-hateoas:$spring_boot_version"
    compile "org.springframework.boot:spring-boot-starter-undertow:$spring_boot_version"

    runtime "org.springframework.boot:spring-boot-devtools:$spring_boot_version"

    compile "io.springfox:springfox-swagger2:$swagger_version"
    compile "io.springfox:springfox-swagger-ui:$swagger_version"
    compile "org.springframework.security.oauth:spring-security-oauth2:2.2.0.RELEASE"
//    compile "org.springframework.boot:spring-boot-starter-security:$spring_boot_version"

    runtime "net.java.dev.jna:jna:4.5.0"

    testCompile "org.openjdk.jmh:jmh-generator-annprocess:1.19"
    testCompile "org.springframework.boot:spring-boot-starter-test:$spring_boot_version"
}

test {
    testLogging {
        exceptionFormat = "full"
    }
}

//tasks.jmh.finalizedBy tasks.jmhReport
//jmh {
////    include = ["Load10Users", "Load100Users", "LoadIndex2Users"]
////    include = ["Load10Users", "Load100Users", "Load1000Users", "LoadIndex2Users"]
//    include = ["Load10Users"] // for local tests
//    fork = 0
//    warmupIterations = 1
//    failOnError = true
//    resultFormat = "JSON"
//    iterations = 20
//    setDuplicateClassesStrategy(DuplicatesStrategy.FAIL)
//}
//jmhReport {
//    jmhResultPath = project.file("build/reports/jmh/results.json")
//    jmhReportOutput = project.file("build/reports/jmh")
//}

jmhReport {
    jmhResultPath = project.file("$buildDir/jmh-result.json")
    jmhReportOutput = project.file(buildDir)
}
task runJMH(type: JavaExec) {
    main = "com.intrafind.sitesearch.jmh.Load10Users"
    classpath sourceSets.test.runtimeClasspath
}
tasks.runJMH.finalizedBy tasks.jmhReport

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}
