input {
    #stdin {}
    gelf {
        #        port => 12201
        #        type => gelf
    }
    #file {
    #  path =>  ["/usr/share/logstash/pipeline/if-sitesearch.log"]
    #}
}
filter {
    grok {
        match => {
            #            "message", "^.+ %{LOGLEVEL:log_level} .+siteId: %{UUID:siteId} .+query: %{WORD:query} .+results: %{NUMBER:results:int}%{GREEDYDATA:tail}$",
            #            "message", "^.+ %{LOGLEVEL:log_level} .+siteId: %{UUID:siteId} .+bodySize: %{NUMBER:bodySize:int} .+titleSize: %{NUMBER:titleSize:int} .+URL: %{URI:url}%{GREEDYDATA:tail}$"
            "message" => [
            "^.+ %{LOGLEVEL:log_level} .+siteId: %{UUID:siteId}"
            ]
            #            "message", "^.+ %{LOGLEVEL:log_level} .+siteId: %{UUID:siteId}",
            #            "message", "^.+query: %{WORD:query} .+results: %{NUMBER:results:int}$",
            #            "message", "^.+bodySize: %{NUMBER:bodySize:int} .+titleSize: %{NUMBER:titleSize:int} .+URL: %{URI:url}$"
        }
    }

    grok {
        match => {
            #        "message", "^.+ %{LOGLEVEL:log_level}.+siteId: %{UUID:siteId}.+query: %{WORD:query}.+results: %{NUMBER:results:int}%{GREEDYDATA:tail}$"
            "message" => "^.+query: %{WORD:query} .+results: %{NUMBER:results:int}$"
        }
            add_tag => ["search"]
            break_on_match => true
    }

    grok {
        match => {
            "message" => "^.+bodySize: %{NUMBER:bodySize:int} .+titleSize: %{NUMBER:titleSize:int} .+URL: %{URI:url}$"
        }
        add_tag => [ "index" ]
        break_on_match => true
    }

    # if log line contains tab character followed by "at" then we will tag that entry as stacktrace
    if [message] =~ "\tat" {
        grok {
            match => ["message", "^(\tat)"]
            add_tag => ["stacktrace"]
        }
    }
}
output {
    elasticsearch {
        hosts => [ "ops-elasticsearch", "ops-elasticsearch-opt" ]
    }
}
